import 'dart:convert';

import 'package:dio/dio.dart';
import 'package:project_1_frontend/model/postprd.dart';
import 'package:project_1_frontend/services/authservice.dart';
import 'package:project_1_frontend/services/config.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;

class AuthService {
  final Dio dio = Dio();
   final storage = const FlutterSecureStorage();
  Config configObj = Config();

  Future<Response> registerUser({
    required String username,
    required String email,
    required String password,
    required String confirmPassword,
    required String phone
  }) async {
    if (password != confirmPassword) {
      throw Exception('Passwords do not match.');
    }
     try {
      final response = await dio.post(
        "${configObj.url}register",
        data: {
          'username': username,
          'email': email,
          'password': password,
          'phone': phone,
        },
      );
      return response;
    } catch (e) {
      print(e);
      throw Exception('Failed to register user: $e');
    }
  }
  

  // Future<Map<String, dynamic>> userlogin(String email, String password) async {
  //   try {
  //     final response = await dio.post(
  //     "${configObj.url}login",
  //       data: {"email": email, "password": password},
  //     );

  //     if (response.statusCode == 200) {
  //       // Login successful, return response data
  //       return response.data;
  //     } else {
  //       // Handle other status codes (e.g., 401 for unauthorized)
  //       throw Exception('Failed to login: ${response.statusCode}');
  //     }
  //   } on DioError catch (e) {
  //     // Handle Dio errors (e.g., network issues)
  //     throw e;
  //   }
  // }

  userlogin(String email, String password) async {

 userlogin(String email, String password) async {

    try {
      final response = await dio.post(
      "${configObj.url}login",
        data: {"email": email, "password": password},
      );

      if (response.statusCode == 200) {
        // Login successful, return response data
        await storage.write(key: "token", value: response.data["token"]);
        return response;
      } else {
        // Handle other status codes (e.g., 401 for unauthorized)
        throw Exception('Failed to login: ${response.statusCode}');
      }
    } on DioError catch (e) {
      // Handle Dio errors (e.g., network issues)
      throw e;
    }
  }

  
    Future<List<Bus>> getBus() async {
      final storage = const FlutterSecureStorage();
      Config configObj = Config();

    try {
      final apiUrl = "http://127.0.0.1:5000/predict";
      final response = await dio.get(apiUrl);

      if (response.statusCode == 200) {
        // Parse the response body using busFromJson function (assuming it's generated by json_serializable)
        return busFromJson(response.data);
      } else {
        // Handle any errors (e.g., server errors)
        return [];
      }
    } catch (e) {
      // Handle Dio errors (e.g., network errors)
      return [];
    }
  }

getBusByLocation(String from, String to) async {
  try {
    final response = await Dio().post(
      "${configObj.url}busbylocation",
      data: {
        'from': from,
        'to': to,
      },
    );

    if (response.statusCode == 200) {
      // Assuming the response data is a list of Bus objects
      List<Bus> buses = busFromJson(response.data);
      return buses;
    } else {
      // Handle non-200 status code responses
      throw Exception('Failed to fetch buses: ${response.statusCode}');
    }
  } catch (e) {
    // Handle Dio errors or other exceptions
    print('Error fetching buses: $e');
    throw Exception('Failed to fetch buses: $e');
  }
}


}

  


class PostApiService {
  final Config config = Config();

Future<List<Bus>> getBus(String busFrom, String busTo, String acNonAc, double cost, String busType) async {
  try {
    var apiUrl = Uri.parse(config.flaskUrl);
    var response = await http.post(
      apiUrl,
      headers: <String, String>{
        "Content-Type": "application/json; charset=UTF-8"
      },
      body: jsonEncode(<String, dynamic>{
        "busFrom": busFrom,
        "busTo": busTo,
        "acNonAc": acNonAc,
        "cost": cost,
        "busType": busType
      }),
    );

    if (response.statusCode == 200) {
      // Parse the response body into a list of Bus objects
      return busFromJson(response.body);
    } else {
      // Return an empty list if the status code is not 200
      return [];
    }
  } catch (e) {
    // Print error message if there's an exception
    print("Error fetching bus data: $e");
    return []; // Return an empty list if there's an error
  }
}
}